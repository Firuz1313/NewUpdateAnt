import pkg from "pg";
import dotenv from "dotenv";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

// ES Modules helper
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const { Pool, Client } = pkg;

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (Vercel/Neon)
const CONNECTION_STRING =
  process.env.DATABASE_URL ||
  process.env.POSTGRES_URL ||
  process.env.POSTGRES_PRISMA_URL ||
  process.env.POSTGRES_URL_NON_POOLING ||
  process.env.VERCEL_POSTGRES_URL ||
  process.env.NEON_DATABASE_URL ||
  "";

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
let dbConfig;

if (CONNECTION_STRING) {
  // Use common connection string (Neon/Vercel/Heroku)
  dbConfig = {
    connectionString: CONNECTION_STRING,
    ssl:
      CONNECTION_STRING.includes("neon.tech") ||
      CONNECTION_STRING.includes("sslmode=require") ||
      process.env.DB_SSL === "true"
        ? { rejectUnauthorized: false }
        : false,

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ pool —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (—É–≤–µ–ªÔøΩÔøΩ—á–µ–Ω—ã –¥–ª—è TV interface –æ–ø–µ—Ä–∞—Ü–∏–π)
    max: 50, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ pool (—É–≤–µ–ª–∏—á–µ–Ω–æ —Å 20)
    min: 5, // –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (—É–≤–µ–ª–∏—á–µ–Ω–æ —Å 2)
    idleTimeoutMillis: 60000, // –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (—É–≤–µ–ª–∏—á–µ–Ω–æ)
    connectionTimeoutMillis: 15000, // —Ç–∞–π–º–∞—É—Ç –øÔøΩÔøΩ–¥–∫–ª—é—á–µ–Ω–∏—è (—É–≤–µ–ª–∏—á–µ–Ω–æ)
    maxUses: 7500, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  };
} else {
  // Fallback to individual env vars
  dbConfig = {
    host: process.env.DB_HOST || "localhost",
    port: parseInt(process.env.DB_PORT || "5432", 10),
    database: process.env.DB_NAME || "ant_support",
    user: process.env.DB_USER || "postgres",
    password: process.env.DB_PASSWORD || "password",
    ssl: process.env.DB_SSL === "true" ? { rejectUnauthorized: false } : false,

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ pool —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (—É–≤–µ–ª–∏—á–µ–Ω—ã –¥–ª—è TV interface –æ–ø–µ—Ä–∞—Ü–∏–π)
    max: 50, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ pool (—É–≤–µ–ª–∏—á–µ–Ω–æ —Å 20)
    min: 10, // –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (—É–≤–µ–ª–∏—á–µ–Ω–æ —Å 5)
    idleTimeoutMillis: 60000, // –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (—É–≤–µ–ª–∏—á–µ–Ω–æ)
    connectionTimeoutMillis: 15000, // —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—É–≤–µ–ª–∏—á–µ–Ω–æ)
    maxUses: 7500, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  };
}

// –°–æ–∑–¥–∞–Ω–∏–µ pool —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
const pool = new Pool(dbConfig);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π pool
pool.on("connect", (client) => {
  console.log("üìä –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
});

pool.on("error", (err, client) => {
  console.error("üìä –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:", err.message);
});

pool.on("acquire", (client) => {
  if (process.env.DEBUG_SQL === "true") {
    console.log("üìä –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω –∏–∑ pool");
  }
});

pool.on("release", (client) => {
  if (process.env.DEBUG_SQL === "true") {
    console.log("üìä –ö–ª–∏–µ–Ω—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ pool");
  }
});

// PostgreSQL only configuration

// –§—ÉÔøΩÔøΩ–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
export async function testConnection() {
  let client;
  try {
    client = await pool.connect();
    const result = await client.query(
      "SELECT NOW() as current_time, version() as postgres_version",
    );

    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ");
    console.log(`üïê –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${result.rows[0].current_time}`);
    console.log(
      `üìã –í–µ—Ä—Å–∏—è PostgreSQL: ${result.rows[0].postgres_version.split(" ")[0]}`,
    );

    return {
      success: true,
      serverTime: result.rows[0].current_time,
      version: result.rows[0].postgres_version,
    };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:", error.message);

    // PostgreSQL connection failed
    console.error("‚ùå Failed to connect to PostgreSQL database");

    return {
      success: false,
      error: error.message,
      connectionStringUsed: CONNECTION_STRING ? "env-connection-string" : "host-params",
    };
  } finally {
    if (client) {
      client.release();
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—ÅÔøΩÔøΩ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
export async function query(text, params = []) {
  const start = Date.now();
  let client;

  try {
    client = await pool.connect();

    if (process.env.DEBUG_SQL === "true") {
      console.log("üîç SQL Query:", text);
      console.log("üîç Parameters:", params);
    }

    const result = await client.query(text, params);
    const duration = Date.now() - start;

    if (process.env.DEBUG_SQL === "true") {
      console.log(`‚è±Ô∏è  Query completed in ${duration}ms`);
      console.log(`üìä Rows affected: ${result.rowCount}`);
    }

    return result;
  } catch (error) {
    const duration = Date.now() - start;
    console.error(`‚ùå SQL Error after ${duration}ms:`, error.message);
    console.error("üîç Query:", text);
    console.error("üîç Parameters:", params);

    throw error;
  } finally {
    if (client) {
      client.release();
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
export async function transaction(callback) {
  let client;

  try {
    client = await pool.connect();
    await client.query("BEGIN");

    try {
      const result = await callback(client);
      await client.query("COMMIT");
      return result;
    } catch (error) {
      await client.query("ROLLBACK");
      throw error;
    }
  } finally {
    if (client) {
      client.release();
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
export async function createDatabase() {
  const adminConfig = {
    ...dbConfig,
    database: "postgres", // –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ë–î –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π
  };

  let client;

  try {
    client = new Client(adminConfig);
    await client.connect();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    const checkResult = await client.query(
      "SELECT 1 FROM pg_database WHERE datname = $1",
      [dbConfig.database],
    );

    if (checkResult.rows.length === 0) {
      console.log(`üìä –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${dbConfig.database}`);
      await client.query(`CREATE DATABASE "${dbConfig.database}"`);
      console.log("ÔøΩÔøΩÔøΩ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ ÔøΩÔøΩ—Å–ø–µ—à–Ω–æ");
    } else {
      console.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ${dbConfig.database} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error.message);
    throw error;
  } finally {
    if (client) {
      await client.end();
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
function splitSqlStatements(sql) {
  const statements = [];
  let cur = "";
  let inSingle = false;
  let inDouble = false;
  let inLineComment = false;
  let inBlockComment = false;
  let dollarTag = null;

  for (let i = 0; i < sql.length; i++) {
    const ch = sql[i];
    const next = sql[i + 1] || "";

    // handle line comments
    if (inLineComment) {
      cur += ch;
      if (ch === "\n") inLineComment = false;
      continue;
    }

    // handle block comments
    if (inBlockComment) {
      cur += ch;
      if (ch === "*" && next === "/") {
        cur += "/";
        inBlockComment = false;
        i++; // skip next
      }
      continue;
    }

    // handle dollar-quoted strings
    if (dollarTag) {
      cur += ch;
      if (ch === "$" && sql.slice(i - dollarTag.length + 1, i + 1) === dollarTag) {
        // close tag
        dollarTag = null;
      }
      continue;
    }

    // detect start of dollar tag
    if (ch === "$" && !inSingle && !inDouble) {
      const m = sql.slice(i).match(/^\$[A-Za-z0-9_]*\$/);
      if (m) {
        dollarTag = m[0];
        cur += m[0];
        i += m[0].length - 1;
        continue;
      }
    }

    // handle quotes
    if (inSingle) {
      cur += ch;
      if (ch === "'") inSingle = false;
      if (ch === "\\") {
        // escape next char
        i++;
        cur += sql[i] || "";
      }
      continue;
    }

    if (inDouble) {
      cur += ch;
      if (ch === '"') inDouble = false;
      if (ch === "\\") {
        i++;
        cur += sql[i] || "";
      }
      continue;
    }

    // start quotes or comments
    if (ch === "-" && next === "-") {
      inLineComment = true;
      cur += "--";
      i++;
      continue;
    }

    if (ch === "/" && next === "*") {
      inBlockComment = true;
      cur += "/*";
      i++;
      continue;
    }

    if (ch === "'") {
      inSingle = true;
      cur += ch;
      continue;
    }

    if (ch === '"') {
      inDouble = true;
      cur += ch;
      continue;
    }

    // split on semicolon when not inside any structure
    if (ch === ";") {
      // push statement including semicolon
      const stmt = cur.trim();
      if (stmt.length > 0) statements.push(stmt + ";");
      cur = "";
      continue;
    }

    cur += ch;
  }

  if (cur.trim().length > 0) statements.push(cur);
  return statements;
}

export async function runMigrations() {
  try {
    console.log("üîÑ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
    await query(`
      CREATE TABLE IF NOT EXISTS migrations (
        id SERIAL PRIMARY KEY,
        filename VARCHAR(255) UNIQUE NOT NULL,
        executed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      )
    `);

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
    const executedResult = await query(
      "SELECT filename FROM migrations ORDER BY id",
    );
    const executedMigrations = new Set(
      executedResult.rows.map((row) => row.filename),
    );

    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π
    const migrationsDir = path.join(__dirname, "../../migrations");
    const migrationFiles = fs
      .readdirSync(migrationsDir)
      .filter((file) => file.endsWith(".sql"))
      .sort();

    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${migrationFiles.length} —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π`);

    for (const filename of migrationFiles) {
      if (executedMigrations.has(filename)) {
        console.log(`‚è≠Ô∏è  –ú–∏–≥—Ä–∞—Ü–∏—è ${filename} —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        continue;
      }

      console.log(`üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—ÜÔøΩÔøΩ–∏: ${filename}`);

      const migrationPath = path.join(migrationsDir, filename);
      const migrationSQL = fs.readFileSync(migrationPath, "utf8");

      try {
        // –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å—é –º–∏–≥—Ä–∞—Ü–∏—é —Ä–∞–∑–æ–º
        try {
          await query(migrationSQL);
        } catch (fullErr) {
          console.warn(`‚ö†Ô∏è –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ ${filename} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ-—á–∞—Å—Ç—è–º: ${fullErr.message}`);

          // –§–æ–ª–ª–±–µ–∫: –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º
          const statements = splitSqlStatements(migrationSQL).map((s) => s.trim()).filter((s) => s.length > 0);

          for (const stmt of statements) {
            try {
              await query(stmt);
            } catch (stmtErr) {
              const msg = (stmtErr && stmtErr.message) || String(stmtErr);
              // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –æ—à–∏–±–∫–∏ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∫–æ–ª–æ–Ω–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ —Ç.–¥.)
              if (/already exists|duplicate key|relation .* already exists|column ".*" does not exist|index .* already exists/i.test(msg)) {
                console.warn(`‚ÑπÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏–∑-–∑–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ–π –æ—à–∏–±–∫–∏: ${msg}`);
                continue;
              }

              console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤ –º–∏–≥—Ä–∞—Ü–∏–∏ ${filename}:`, msg);
              throw stmtErr;
            }
          }
        }

        // –ü–æ–º–µ—á–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
        try {
          await query("INSERT INTO migrations (filename) VALUES ($1)", [filename]);
        } catch (insErr) {
          if (!/duplicate key|already exists/i.test((insErr && insErr.message) || "")) {
            throw insErr;
          }
        }

        console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è ${filename} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
      } catch (migErr) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ ${filename}:`, (migErr && migErr.message) || String(migErr));
        throw migErr;
      }
    }

    console.log("üéâ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π:", error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã tv_interfaces
export async function fixTVInterfacesSchema() {
  try {
    console.log("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã tv_interfaces...");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    const columnsQuery = `
      SELECT column_name
      FROM information_schema.columns
      WHERE table_name = 'tv_interfaces' AND column_name IN ('clickable_areas', 'highlight_areas');
    `;

    const existingColumns = await query(columnsQuery);
    const hasClickableAreas = existingColumns.rows.some(
      (row) => row.column_name === "clickable_areas",
    );
    const hasHighlightAreas = existingColumns.rows.some(
      (row) => row.column_name === "highlight_areas",
    );

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    if (!hasClickableAreas) {
      await query(`
        ALTER TABLE tv_interfaces
        ADD COLUMN clickable_areas JSONB NOT NULL DEFAULT '[]'::jsonb
      `);
      console.log("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ clickable_areas");
    }

    if (!hasHighlightAreas) {
      await query(`
        ALTER TABLE tv_interfaces
        ADD COLUMN highlight_areas JSONB NOT NULL DEFAULT '[]'::jsonb
      `);
      console.log("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ highlight_areas");
    }

    if (hasClickableAreas && hasHighlightAreas) {
      console.log("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç");
    }

    console.log("üéâ –°—Ö–µ–º–∞ tv_interfaces –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞");
    return true;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã tv_interfaces:", error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã tv_interface_marks
export async function createTVInterfaceMarksTable() {
  try {
    console.log("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã tv_interface_marks...");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    const tableCheck = await query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables
        WHERE table_schema = 'public'
        AND table_name = 'tv_interface_marks'
      );
    `);

    if (!tableCheck.rows[0].exists) {
      console.log("‚ùå –¢–∞–±–ª–∏—Ü–∞ tv_interface_marks ÔøΩÔøΩ–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
      console.log("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã tv_interface_marks...");

      await query(`
        CREATE TABLE tv_interface_marks (
          id VARCHAR(255) PRIMARY KEY,
          tv_interface_id VARCHAR(255) NOT NULL REFERENCES tv_interfaces(id) ON DELETE CASCADE,
          step_id VARCHAR(255) REFERENCES diagnostic_steps(id) ON DELETE CASCADE,
          name VARCHAR(255) NOT NULL,
          description TEXT,
          mark_type VARCHAR(50) NOT NULL DEFAULT 'point' CHECK (mark_type IN ('point', 'zone', 'area')),
          shape VARCHAR(50) NOT NULL DEFAULT 'circle' CHECK (shape IN ('circle', 'rectangle', 'polygon', 'ellipse')),
          position JSONB NOT NULL,
          size JSONB,
          coordinates JSONB,
          color VARCHAR(50) DEFAULT '#3b82f6',
          background_color VARCHAR(50),
          border_color VARCHAR(50),
          border_width INTEGER DEFAULT 2,
          opacity DECIMAL(3,2) DEFAULT 0.8,
          is_clickable BOOLEAN DEFAULT true,
          is_highlightable BOOLEAN DEFAULT true,
          click_action VARCHAR(255),
          hover_action VARCHAR(255),
          action_value VARCHAR(255),
          action_description TEXT,
          expected_result TEXT,
          hint_text TEXT,
          tooltip_text TEXT,
          warning_text TEXT,
          animation VARCHAR(50) DEFAULT 'none' CHECK (animation IN ('pulse', 'glow', 'bounce', 'shake', 'fade', 'blink', 'none')),
          animation_duration INTEGER DEFAULT 1000,
          animation_delay INTEGER DEFAULT 0,
          display_order INTEGER DEFAULT 0,
          priority VARCHAR(20) DEFAULT 'normal' CHECK (priority IN ('low', 'normal', 'high', 'critical')),
          is_active BOOLEAN DEFAULT true,
          is_visible BOOLEAN DEFAULT true,
          metadata JSONB DEFAULT '{}',
          tags JSONB DEFAULT '[]',
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
      `);

      // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
      await query(`
        CREATE INDEX idx_tv_interface_marks_tv_interface_id ON tv_interface_marks(tv_interface_id);
        CREATE INDEX idx_tv_interface_marks_step_id ON tv_interface_marks(step_id);
        CREATE INDEX idx_tv_interface_marks_mark_type ON tv_interface_marks(mark_type);
        CREATE INDEX idx_tv_interface_marks_active ON tv_interface_marks(is_active);
      `);

      console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ tv_interface_marks —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
    } else {
      console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ tv_interface_marks —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
    }

    return true;
  } catch (error) {
    console.error(
      "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã tv_interface_marks:",
      error.message,
    );
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã diagnostic_sessions –∏ diagnostic_steps
export async function fixDiagnosticSessionsSchema() {
  try {
    console.log("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã diagnostic_sessions...");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ diagnostic_sessions
    const sessionsColumnsQuery = `
      SELECT column_name
      FROM information_schema.columns
      WHERE table_name = 'diagnostic_sessions' AND column_name IN ('is_active', 'end_time');
    `;

    const sessionsColumns = await query(sessionsColumnsQuery);
    const existingSessionsColumns = sessionsColumns.rows.map(
      (row) => row.column_name,
    );

    const hasSessionsIsActive = existingSessionsColumns.includes("is_active");
    const hasSessionsEndTime = existingSessionsColumns.includes("end_time");

    if (!hasSessionsIsActive) {
      await query(`
        ALTER TABLE diagnostic_sessions
        ADD COLUMN is_active BOOLEAN NOT NULL DEFAULT true
      `);
      console.log("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ is_active –≤ diagnostic_sessions");
    }

    if (!hasSessionsEndTime) {
      await query(`
        ALTER TABLE diagnostic_sessions
        ADD COLUMN end_time TIMESTAMP WITH TIME ZONE
      `);
      console.log("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ end_time –≤ diagnostic_sessions");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ is_active –≤ diagnostic_steps
    const stepsColumnsQuery = `
      SELECT column_name
      FROM information_schema.columns
      WHERE table_name = 'diagnostic_steps' AND column_name = 'is_active';
    `;

    const stepsColumns = await query(stepsColumnsQuery);
    const hasStepsIsActive = stepsColumns.rows.length > 0;

    if (!hasStepsIsActive) {
      await query(`
        ALTER TABLE diagnostic_steps
        ADD COLUMN is_active BOOLEAN NOT NULL DEFAULT true
      `);
      console.log("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ is_active –≤ diagnostic_steps");
    }

    if (hasSessionsIsActive && hasSessionsEndTime && hasStepsIsActive) {
      console.log("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç");
    }

    console.log("üéâ –°—Ö–µ–º–∞ diagnostic_sessions –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞");
    return true;
  } catch (error) {
    console.error(
      "‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã diagnostic_sessions:",
      error.message,
    );
    throw error;
  }
}

// –§—ÉÔøΩÔøΩ–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export async function getDatabaseStats() {
  try {
    const stats = await query(`
      SELECT
        schemaname,
        relname as table_name,
        n_tup_ins as inserts,
        n_tup_upd as updates,
        n_tup_del as deletes,
        n_live_tup as row_count,
        n_dead_tup as dead_rows
      FROM pg_stat_user_tables
      ORDER BY n_live_tup DESC
    `);

    const dbSize = await query(`
      SELECT pg_size_pretty(pg_database_size(current_database())) as size
    `);

    return {
      tables: stats.rows,
      databaseSize: dbSize.rows[0].size,
      timestamp: new Date().toISOString(),
    };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î:", error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏ÔøΩÔøΩÔøΩÔøΩ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
export async function closePool() {
  try {
    console.log("üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL...");
    await pool.end();
    console.log("‚úÖ –ü—É–ª —Å–æÔøΩÔøΩÔøΩ–¥–∏–Ω–µ–Ω–∏–π –∑–∞–∫—Ä—ã—Ç");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –øÔøΩÔøΩ–ª–∞:", error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (maintenance)
export async function cleanupOldData(daysToKeep = 90) {
  try {
    console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ä—à–µ ${daysToKeep} –¥–Ω–µ–π...`);

    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏
    const sessionsResult = await query(
      `
      DELETE FROM diagnostic_sessions 
      WHERE start_time < $1 AND end_time IS NOT NULL
    `,
      [cutoffDate],
    );

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ªÔøΩÔøΩ–≥–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const logsResult = await query(
      `
      DELETE FROM change_logs 
      WHERE created_at < $1
    `,
      [cutoffDate],
    );

    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–µ—Å—Å–∏–π: ${sessionsResult.rowCount}`);
    console.log(`‚úÖ –£–¥ÔøΩÔøΩ–ª–µ–Ω–æ –ª–æ–≥–æ–≤: ${logsResult.rowCount}`);

    // –ûÔøΩÔøΩ–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await query("ANALYZE");

    return {
      deletedSessions: sessionsResult.rowCount,
      deletedLogs: logsResult.rowCount,
    };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—áÔøΩÔøΩ—ÅÔøΩÔøΩ–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
export async function searchText(
  searchTerm,
  tables = ["problems", "devices", "diagnostic_steps"],
) {
  try {
    const searchResults = {};

    for (const table of tables) {
      let searchQuery;

      switch (table) {
        case "problems":
          searchQuery = `
            SELECT id, title, description, 
                   ts_rank(to_tsvector('russian', title || ' ' || COALESCE(description, '')), plainto_tsquery('russian', $1)) as rank
            FROM problems 
            WHERE to_tsvector('russian', title || ' ' || COALESCE(description, '')) @@ plainto_tsquery('russian', $1)
            AND is_active = true
            ORDER BY rank DESC
            LIMIT 20
          `;
          break;

        case "devices":
          searchQuery = `
            SELECT id, name, brand, model, description,
                   ts_rank(to_tsvector('russian', name || ' ' || brand || ' ' || COALESCE(description, '')), plainto_tsquery('russian', $1)) as rank
            FROM devices
            WHERE to_tsvector('russian', name || ' ' || brand || ' ' || COALESCE(description, '')) @@ plainto_tsquery('russian', $1)
            AND is_active = true
            ORDER BY rank DESC
            LIMIT 20
          `;
          break;

        case "diagnostic_steps":
          searchQuery = `
            SELECT id, title, description, instruction,
                   ts_rank(to_tsvector('russian', title || ' ' || COALESCE(description, '') || ' ' || instruction), plainto_tsquery('russian', $1)) as rank
            FROM diagnostic_steps
            WHERE to_tsvector('russian', title || ' ' || COALESCE(description, '') || ' ' || instruction) @@ plainto_tsquery('russian', $1)
            AND is_active = true
            ORDER BY rank DESC
            LIMIT 20
          `;
          break;
      }

      if (searchQuery) {
        const result = await query(searchQuery, [searchTerm]);
        searchResults[table] = result.rows;
      }
    }

    return searchResults;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏ÔøΩÔøΩ–∫–∞:", error.message);
    throw error;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç pool –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏—ÅÔøΩÔøΩ–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —ÅÔøΩÔøΩÔøΩÔøΩ—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
export { pool };

export default {
  query,
  transaction,
  testConnection,
  createDatabase,
  runMigrations,
  getDatabaseStats,
  closePool,
  cleanupOldData,
  searchText,
  pool,
};
